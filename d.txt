#include"ui.h"
#define NUM_DRIPS 250
#define p_change 0.9
#define PROB_DIM 0.5
#define PROB_DRIP_SPAWN 0.60
#define RANDOM_PRINTABLE_CHARACHTER 33 + rand()%80
typedef struct Drip{
    int x,y;
    bool live;
    int bright;
}drip;
drip drips[NUM_DRIPS];


double rand01(){
    return (double) rand() / (double)RAND_MAX;
}
void init_drips(){
    for(int i=0;i<NUM_DRIPS;i++){
        drips[i].live = false;
    }
}
cell matrix[MAXX][MAXY];
void matrix_init(){
    //init drips
     for(int x=0;x<MAXX;x++){
        for(int y=0;y<MAXY;y++){
                matrix[x][y].char_value = 0;
                matrix[x][y].intensity = 0;
                
         }
    }
    init_drips();
}

void fade_n_change_matrix(){
    for(int x=0;x<MAXX;x++){
        for(int y=0;y<MAXY;y++){
                //randomly chage characters ----  even invisible ones.
                if(rand01() < p_change || matrix[x][y].char_value ==0 ){
                        matrix[x][y].char_value = RANDOM_PRINTABLE_CHARACHTER;
                }
                //randomly dim cells
                if(rand01() < PROB_DIM){
                    if(matrix[x][y].intensity > 0){
                        matrix[x][y].intensity = 0;
                    }
                }
                matrix[x][y].char_value = 0;
                matrix[x][y].intensity--;
                
         }
    }
}

void try_add_drips(){
    for(int i=0;i<NUM_DRIPS;i++){
        if(drips[i].live == false){
            drips[i].live = true; 
            drips[i].x = rand()%MAXX;
            drips[i].y = 0;
            drips[i].bright = rand()%2;
            return;
        }
    }
}
void update_drips(){
    for(int i=0;i<NUM_DRIPS;i++){
        if(drips[i].live == true){
            if(drips[i].bright){
                matrix[drips[i].x][drips[i].y].intensity = MAX_INTENSITY;
            }else{
                matrix[drips[i].x][drips[i].y].intensity = MIN_INTENSITY;
            }
        }
        // drips die
        if(++drips[i].y >=MAXY-1){
            drips[i].live  = false;
        }
    }
}
void matrix_update(){
    if(rand01()< PROB_DRIP_SPAWN){
        try_add_drips();
    }
    update_drips();
    fade_n_change_matrix();
}